const express = require('express');
const router = express.Router();
const Book = require('../models/index').Book
const bookData =require('./helperData')



const asyncHandler = (innerFunction) =>{
    return async (req, res, next)=>{
        try {
            await innerFunction(req, res, next)
        }  catch (error) {
            console.log("Async has been used and produce an error")
            res.render('error', {error})
        }
    }
}

let activeFields = [];

//Identifies all user-defined fields from the Model
(async () => {
    for (let each in await Book.tableAttributes){
       /* (Book.tableAttributes[each]._autoGenerated === undefined) &&*/ activeFields.push(each)

    }
})()




//Responds a list of Book objects


router.get('/', async(req, res)=>{
    let displayArray = [];
    const bookArray = await Book.findAll();


    //Object creation of the database entries
    bookArray.forEach((each)=> {
        let displayObject = {}
        activeFields.forEach((field) => {displayObject[field] = each.dataValues[field]
        })
        displayArray.push(displayObject);
    })

    res.render('index', {books: displayArray, header: 'All Books', title: "Library App"})
    // res.send(displayArray)
})



router.get('/new', async(req, res)=>{

    res.render('new.pug')


})


//Responds the matched book to the id, 'Name'
router.get('/:id', asyncHandler( async (req, res)=>{



    const instance  = await Book.findOne({
        'where': {
            'id': req.params['id']
        }
    })

    let instObj = {}
    activeFields.forEach((field)=>{
        instObj[field] = instance[field]

    })
    res.render('update', {data:  instObj})
    // res.sendStatus(200)
}))


//Posts a new book to the database
router.post('/new', async(req, res)=>{

    try {
        await Book.create(req.body)
        res.redirect('/')
    } catch (error){
        res.render("error_Form", {error})
    }


})

//Updates book in the database
router.post('/:id', async(req, res)=>{
    const idParam = req.params.id;
    const instance = await Book.findOne({
        'where': {
            'id': idParam
        }
    })
    await instance.update(req.body)
    res.redirect("/")


})


//Deletes a book
router.post('/:id/delete', async (req, res) => {


    const instance = await Book.destroy({
        'where': {
            'id': req.params.id
        },
    })
    res.redirect("/")
})


module.exports = router